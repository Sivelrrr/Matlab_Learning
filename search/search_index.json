{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Table of Contents Input Preprocess eeg_htpCalcPower eeg_htpEegEpoch2Cont util_htpRemapXdatMea Cleaned Data QI Metrics eeg_htpCalcFooof Analysis eeg_htpEegAssessPipelineHAPPE eeg_htpEegResampleDataEeglab eeg_htpCalcTimeFrequency Reporting Data Tables Figures","title":"Table of Contents"},{"location":"#table-of-contents","text":"","title":"Table of Contents"},{"location":"#input","text":"","title":"Input"},{"location":"#preprocess","text":"eeg_htpCalcPower eeg_htpEegEpoch2Cont util_htpRemapXdatMea","title":"Preprocess"},{"location":"#cleaned-data-qi-metrics","text":"eeg_htpCalcFooof","title":"Cleaned Data QI Metrics"},{"location":"#analysis","text":"eeg_htpEegAssessPipelineHAPPE eeg_htpEegResampleDataEeglab eeg_htpCalcTimeFrequency","title":"Analysis"},{"location":"#reporting","text":"","title":"Reporting"},{"location":"#data-tables-figures","text":"","title":"Data Tables Figures"},{"location":"overview/","text":"Overview The VHTP toolkit is used to help with the aplication and repoting of EEEG analysis. VHTP will allow users to create ready-to-use EEG outputs using simple function that utilizes common EEG toolkits such as EEGLAB.","title":"Screenshot"},{"location":"overview/#_1","text":"","title":""},{"location":"overview/#overview","text":"The VHTP toolkit is used to help with the aplication and repoting of EEEG analysis. VHTP will allow users to create ready-to-use EEG outputs using simple function that utilizes common EEG toolkits such as EEGLAB.","title":"Overview"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/","text":"eeg_htpCalcFooof Function Overview The eeg_htpCalcFooof function performs power spectral analysis using the FOOOF (Fitting Oscillations & One-Over-F) approach. It decomposes EEG power spectra into periodic (oscillatory) and aperiodic (background) components, providing insights into underlying neural oscillations. This can be especially useful for analyzing the spectral content of EEG data in terms of background noise versus specific oscillatory peaks. Function Syntax [EEG, results] = eeg_htpCalcFooof(EEG, varargin) Inputs Required Paramters EEG : An EEGLAB structure containing EEG data. This structure should include EEG recordings, channel information, and sampling rate. Optional Parameters (Function-Specific) Specify additional parameters through name-value pairs in varargin. Some key parameters include: f_range : Frequency range of interest, typically defined as [ minFreq maxFreq ]. Defaults to [1 50]. aperiodic_mode : Method for estimating the aperiodic component ( fixed or knee ). Defaults to 'fixed'. peak_width_limits : Limits on the width of detected peaks, as [ minWidth maxWidth ]. Defaults to [1 12]. max_n_peaks : Maximum number of peaks to model in the spectrum. Defaults to 6. plot_results : Whether to plot FOOOF results ( true or false ). Defaults to false . Method Guide Load and Prepare EEG Data Load your EEG data into an EEGLAB structure format. Ensure your data includes sampling rate and channel information required for spectral analysis. EEG = pop_loadset('your_data.set'); % Load EEG data set Define Optional Parameters Specify any optional parameters as name-value pairs. For instance, to set a frequency range from 1 to 40 Hz and plot results, you can set: f_range = [1 40]; plot_results = true; Run eeg_htpCalcFooof Execute the function with your EEG structure and any desired parameters: [EEG, results] = eeg_htpCalcFooof(EEG, 'f_range', f_range, 'plot_results', plot_results); This function will automatically analyze the EEG data across the specified frequency range and plot the results if plot_results is set to true. Example Usage This example demonstrates using eeg_htpCalcFooof with a specific frequency range, peak width limits, and plotting option: % Define parameters f_range = [1 40]; peak_width_limits = [2 10]; plot_results = true; % Run FOOOF analysis [EEG, results] = eeg_htpCalcFooof(EEG, 'f_range', f_range, ... 'peak_width_limits', peak_width_limits, 'plot_results', plot_results); Outputs EEG : Modified EEGLAB structure with .etc.fooof field containing FOOOF results. results : Structure containing FOOOF analysis results, including aperiodic parameters, peak parameters, and goodness-of-fit metrics. The results structure provides the following key outputs: aperiodic_params : Parameters describing the aperiodic component. peak_param s: Frequency, power, and width of detected oscillatory peaks. r_squared : Goodness-of-fit measure for the FOOOF model. error : Mean squared error of the model. Additionally, if plot_results is set to true , the function displays a visual of the decomposed spectrum with aperiodic and periodic components. Additional Notes FOOOF Dependency: This function requires the FOOOF package, so ensure FOOOF is installed and accessible in MATLAB. Spectral Range Limitations: The selected f_range should align with the sampling rate of your data to avoid aliasing issues.","title":"eeg_htpCalcFooof Function"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#eeg_htpcalcfooof-function","text":"","title":"eeg_htpCalcFooof Function"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#overview","text":"The eeg_htpCalcFooof function performs power spectral analysis using the FOOOF (Fitting Oscillations & One-Over-F) approach. It decomposes EEG power spectra into periodic (oscillatory) and aperiodic (background) components, providing insights into underlying neural oscillations. This can be especially useful for analyzing the spectral content of EEG data in terms of background noise versus specific oscillatory peaks.","title":"Overview"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#function-syntax","text":"[EEG, results] = eeg_htpCalcFooof(EEG, varargin)","title":"Function Syntax"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#inputs","text":"","title":"Inputs"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#required-paramters","text":"EEG : An EEGLAB structure containing EEG data. This structure should include EEG recordings, channel information, and sampling rate.","title":"Required Paramters"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#optional-parameters-function-specific","text":"Specify additional parameters through name-value pairs in varargin. Some key parameters include: f_range : Frequency range of interest, typically defined as [ minFreq maxFreq ]. Defaults to [1 50]. aperiodic_mode : Method for estimating the aperiodic component ( fixed or knee ). Defaults to 'fixed'. peak_width_limits : Limits on the width of detected peaks, as [ minWidth maxWidth ]. Defaults to [1 12]. max_n_peaks : Maximum number of peaks to model in the spectrum. Defaults to 6. plot_results : Whether to plot FOOOF results ( true or false ). Defaults to false .","title":"Optional Parameters (Function-Specific)"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#method-guide","text":"","title":"Method Guide"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#load-and-prepare-eeg-data","text":"Load your EEG data into an EEGLAB structure format. Ensure your data includes sampling rate and channel information required for spectral analysis. EEG = pop_loadset('your_data.set'); % Load EEG data set","title":"Load and Prepare EEG Data"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#define-optional-parameters","text":"Specify any optional parameters as name-value pairs. For instance, to set a frequency range from 1 to 40 Hz and plot results, you can set: f_range = [1 40]; plot_results = true;","title":"Define Optional Parameters"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#run-eeg_htpcalcfooof","text":"Execute the function with your EEG structure and any desired parameters: [EEG, results] = eeg_htpCalcFooof(EEG, 'f_range', f_range, 'plot_results', plot_results); This function will automatically analyze the EEG data across the specified frequency range and plot the results if plot_results is set to true. Example Usage This example demonstrates using eeg_htpCalcFooof with a specific frequency range, peak width limits, and plotting option: % Define parameters f_range = [1 40]; peak_width_limits = [2 10]; plot_results = true; % Run FOOOF analysis [EEG, results] = eeg_htpCalcFooof(EEG, 'f_range', f_range, ... 'peak_width_limits', peak_width_limits, 'plot_results', plot_results);","title":"Run eeg_htpCalcFooof"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#outputs","text":"EEG : Modified EEGLAB structure with .etc.fooof field containing FOOOF results. results : Structure containing FOOOF analysis results, including aperiodic parameters, peak parameters, and goodness-of-fit metrics. The results structure provides the following key outputs: aperiodic_params : Parameters describing the aperiodic component. peak_param s: Frequency, power, and width of detected oscillatory peaks. r_squared : Goodness-of-fit measure for the FOOOF model. error : Mean squared error of the model. Additionally, if plot_results is set to true , the function displays a visual of the decomposed spectrum with aperiodic and periodic components.","title":"Outputs"},{"location":"eeg_htpCalcFooof/eeg_htpCalcFooof/#additional-notes","text":"FOOOF Dependency: This function requires the FOOOF package, so ensure FOOOF is installed and accessible in MATLAB. Spectral Range Limitations: The selected f_range should align with the sampling rate of your data to avoid aliasing issues.","title":"Additional Notes"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/","text":"eeg_htpCalcPower Function Introduction The eeg_htpCalcRestPower function calculates the spectral power of resting-state EEG data using the Welch method, which is a common approach for spectral analysis. Below is documentation on how to use this function effectively. Preparing The Data Before using the function make sure EEGLAB is running otherwise the function will error It is also necessary to first load in the EEG file and then extract the EEG strcuture as that is the required input for the funciton. ( note - make sure the EEG structure includes both a subject id and filename). Function Inputs [EEG, results] = eeg_htpCalcRestPower(EEG, varargin) The function shown above has multiple inputs: EEG and Varargin . EEG : Main input of the function and a structure with fields such as .data (EEG signal), .srate (sampling rate), .chanlocs (channel info), and .pnts (number of points). Several optional parameters using the varargin to modify the analysis. You can pass Below are some of the important parameters. gpuon (logical): Use GPU acceleration to speed up computation. Default is false. Set to true if you have the MATLAB Parallel-Processing toolbox installed. duration (integer): Duration in seconds to calculate power. Default is 80 seconds. If the duration exceeds the data length, it uses the maximum available data. offset (integer): Time in seconds to start the calculation. Default is 0. bandDefs (cell array): Frequency band definitions. You can specify bands like delta, theta, alpha, beta, gamma, etc. Example: {'delta', 2, 3.5; 'theta', 3.5, 7.5; 'alpha1', 8, 10; 'beta', 13, 30} outputdir (string): Directory to save the results. By default, it saves in the same directory as the EEG data. useParquet (logical): Save the output in Parquet format. Default is set to false and will save as CSV if false . Running the Function with Default Parameters Here's a simple example using default settings: [EEG, results] = eeg_htpCalcRestPower(EEG); In this example: The function will calculate spectral power for the default 80 seconds of EEG data. It will save the results in CSV format in the default output directory, add a .vhtp structure to the EEG structure containing the same tables, and will create a structure stored in results with the same results for easier access. Customizing Analysis In this case you want to utilize GPU acceleration and change the duration to 30 seconds. You can pass the parameters like this: [EEG, results] = eeg_htpCalcRestPower(EEG, 'gpuon', true, 'duration', 30); In this example: GPU is enabled (key-value pair: gpuon , true ). The analysis is performed on 30 seconds of data (key-value pair: duration , 30). Outputs Once the function runs, it will output two variables shown below: [EEG, results] = eeg_htpCalcRestPower(EEG); EEG : The input EEG structure with the added .vhtp field. results : A structure with the spectral analysis results. It will also save the following data into separate files (based on your settings): Spectral power results for each channel and frequency band. Spectrogram data as a CSV (or Parquet if enabled) showing the power spectral density across channels. The Quality Index (QI) file summarizes information about the EEG dataset and analysis. These files will be saved in the output directory specified by outputdir . Inspecting the Results The results structure contains the following fields: summary_table : A table of power values (absolute, relative, and dB) for each frequency band. spectro : The computed spectrogram for each channel. It also includes relative, absolute, and decibel measurements. qi_table : Metadata about the analysis (e.g., sampling rate, number of channels). Example of how to view the summary table: disp(results.summary_table); Will display a table similar to the following example ( Note - this table is a shortened version of the full table): eegid filename chan abs_delta abs_theta abs_alpha1 __________ _________________ ________ _________ _________ __________ \"EGI file\" \"0228_BBLong.raw\" {'E1' } 28.541 17.488 23.088 \"EGI file\" \"0228_BBLong.raw\" {'E2' } 17.461 13.49 21.089 Summary Use eeg_htpCalcRestPower to calculate spectral power from EEG data. Customize the analysis by adjusting parameters like gpuon , duration , and bandDefs . Save results in either CSV or Parquet format.","title":"eeg_htpCalcPower Function"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/#eeg_htpcalcpower-function","text":"","title":"eeg_htpCalcPower Function"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/#introduction","text":"The eeg_htpCalcRestPower function calculates the spectral power of resting-state EEG data using the Welch method, which is a common approach for spectral analysis. Below is documentation on how to use this function effectively.","title":"Introduction"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/#preparing-the-data","text":"Before using the function make sure EEGLAB is running otherwise the function will error It is also necessary to first load in the EEG file and then extract the EEG strcuture as that is the required input for the funciton. ( note - make sure the EEG structure includes both a subject id and filename).","title":"Preparing The Data"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/#function-inputs","text":"[EEG, results] = eeg_htpCalcRestPower(EEG, varargin) The function shown above has multiple inputs: EEG and Varargin . EEG : Main input of the function and a structure with fields such as .data (EEG signal), .srate (sampling rate), .chanlocs (channel info), and .pnts (number of points). Several optional parameters using the varargin to modify the analysis. You can pass Below are some of the important parameters. gpuon (logical): Use GPU acceleration to speed up computation. Default is false. Set to true if you have the MATLAB Parallel-Processing toolbox installed. duration (integer): Duration in seconds to calculate power. Default is 80 seconds. If the duration exceeds the data length, it uses the maximum available data. offset (integer): Time in seconds to start the calculation. Default is 0. bandDefs (cell array): Frequency band definitions. You can specify bands like delta, theta, alpha, beta, gamma, etc. Example: {'delta', 2, 3.5; 'theta', 3.5, 7.5; 'alpha1', 8, 10; 'beta', 13, 30} outputdir (string): Directory to save the results. By default, it saves in the same directory as the EEG data. useParquet (logical): Save the output in Parquet format. Default is set to false and will save as CSV if false .","title":"Function Inputs"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/#running-the-function-with-default-parameters","text":"Here's a simple example using default settings: [EEG, results] = eeg_htpCalcRestPower(EEG); In this example: The function will calculate spectral power for the default 80 seconds of EEG data. It will save the results in CSV format in the default output directory, add a .vhtp structure to the EEG structure containing the same tables, and will create a structure stored in results with the same results for easier access.","title":"Running the Function with Default Parameters"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/#customizing-analysis","text":"In this case you want to utilize GPU acceleration and change the duration to 30 seconds. You can pass the parameters like this: [EEG, results] = eeg_htpCalcRestPower(EEG, 'gpuon', true, 'duration', 30); In this example: GPU is enabled (key-value pair: gpuon , true ). The analysis is performed on 30 seconds of data (key-value pair: duration , 30).","title":"Customizing Analysis"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/#outputs","text":"Once the function runs, it will output two variables shown below: [EEG, results] = eeg_htpCalcRestPower(EEG); EEG : The input EEG structure with the added .vhtp field. results : A structure with the spectral analysis results. It will also save the following data into separate files (based on your settings): Spectral power results for each channel and frequency band. Spectrogram data as a CSV (or Parquet if enabled) showing the power spectral density across channels. The Quality Index (QI) file summarizes information about the EEG dataset and analysis. These files will be saved in the output directory specified by outputdir .","title":"Outputs"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/#inspecting-the-results","text":"The results structure contains the following fields: summary_table : A table of power values (absolute, relative, and dB) for each frequency band. spectro : The computed spectrogram for each channel. It also includes relative, absolute, and decibel measurements. qi_table : Metadata about the analysis (e.g., sampling rate, number of channels). Example of how to view the summary table: disp(results.summary_table); Will display a table similar to the following example ( Note - this table is a shortened version of the full table): eegid filename chan abs_delta abs_theta abs_alpha1 __________ _________________ ________ _________ _________ __________ \"EGI file\" \"0228_BBLong.raw\" {'E1' } 28.541 17.488 23.088 \"EGI file\" \"0228_BBLong.raw\" {'E2' } 17.461 13.49 21.089","title":"Inspecting the Results"},{"location":"eeg_htpCalcPower/eeg_htpCalcPower/#summary","text":"Use eeg_htpCalcRestPower to calculate spectral power from EEG data. Customize the analysis by adjusting parameters like gpuon , duration , and bandDefs . Save results in either CSV or Parquet format.","title":"Summary"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/","text":"Overview The eeg_htpCalcTimeFrequency function calculates time-frequency analyses, particularly inter-trial coherence (ITC) and event-related spectral perturbation (ERSP), to assess frequency-specific power and phase-locking in EEG data. It's built for auditory stimuli experiments but can be adapted to other paradigms. Syntax [EEG, results] = eeg_htpCalcTimeFrequency(EEG, 'parameterName', parameterValue, ...) Required Input EEG : Main input of the function and a structure with fields such as .data (EEG signal), .srate (sampling rate), .chanlocs (channel info), and .pnts (number of points). Optional Parameters General Parameters tlimits (default: [-500 2750]): Defines the time range for the analysis in milliseconds. Adjust this range to capture the complete ERP response. flimits (default: [2 110]): Specifies the frequency range in Hz for the analysis. The default captures both low and high frequencies. cycles (default: [1 30]): Wavelet cycles, represented as a two-element vector, where higher values improve frequency resolution but increase computation time. timesout (default: 250): The number of time points for the output. Increasing this parameter provides finer temporal resolution. winsize (default: 100): Size of the moving window in milliseconds for calculating the time-frequency response. nfreqs (default: 109): The number of frequencies for time-frequency decomposition. outputdir (default: tempdir ): Directory for saving result files. Adjust this to store outputs in a specific project folder. Artifact Rejection ampThreshold (default: 120): Threshold for artifact rejection. Trials exceeding this amplitude are excluded from analysis. emptyEEG (default: true ): Removes EEG data from the output structure to save memory, retaining only summary metrics. Data Specific Options sourceOn (default: false ): When true , the function selects electrodes specifically for source analysis targeting auditory cortex regions. byChannel (default: false ): When set to true , the function computes time-frequency data for each individual channel. When false , it averages signals from selected sensors. baselinew (default: [-500 0]): A time range in milliseconds for ERSP baseline correction. This baseline is applied to normalize ERSP data relative to a pre-stimulus period. Example Usage Here is a practical example for running this function with baseline correction and source-based electrode selection: [EEG, results] = eeg_htpCalcTimeFrequency(EEG, ... 'sourceOn', true, ... 'byChannel', true, ... 'baselinew', [-500 0]); In this setup: sourceOn = if true uses specific electrodes within the auditory cortex. byChannel = if true processes each selected channel individually. baselinew = [-500 0] applies baseline correction for ERSP based on the -500 to 0 ms pre-stimulus window. Outputs EEG : Modified EEGLAB EEG structure with additional fields for time-frequency data in EEG.vhtp . results : A structure containing: ITC and ERSP data across channels Summary table of results, including metrics like mean power and phase coherence over defined ROIs. Rejection statistics for artifact-prone epochs. Example Workflow Load EEG data and ensure it is epoched for the stimulus of interest. Define analysis parameters: Set tlimits and flimits for the specific time and frequency ranges relevant to your study. Define cycles and timesout based on desired frequency and temporal resolution. Run artifact rejection using ampThreshold to exclude noisy epochs. Run the function with necessary parameters, as shown in the example above. Analyze and save results: Examine the results structure for summary tables and ITC/ERSP data. Save output tables to the specified directory for report generation. Additional Notes Artifact rejection is performed by checking if any trial exceeds the amplitude threshold defined by ampThreshold . ROI specification allows targeted frequency and time ranges for specific ERP components, particularly useful for auditory or visual stimuli. Further customization is possible by modifying cycles , nfreqs , and baseline parameters based on experiment design. Troubleshooting Low trial count error: Ensure that EEG data contains at least 10 trials for stable results. High computation time: Increase winsize and reduce nfreqs if computation is slow, especially for high-density data.","title":"eeg htpCalcTimeFrequency"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#overview","text":"The eeg_htpCalcTimeFrequency function calculates time-frequency analyses, particularly inter-trial coherence (ITC) and event-related spectral perturbation (ERSP), to assess frequency-specific power and phase-locking in EEG data. It's built for auditory stimuli experiments but can be adapted to other paradigms. Syntax [EEG, results] = eeg_htpCalcTimeFrequency(EEG, 'parameterName', parameterValue, ...)","title":"Overview"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#required-input","text":"EEG : Main input of the function and a structure with fields such as .data (EEG signal), .srate (sampling rate), .chanlocs (channel info), and .pnts (number of points).","title":"Required Input"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#optional-parameters","text":"","title":"Optional Parameters"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#general-parameters","text":"tlimits (default: [-500 2750]): Defines the time range for the analysis in milliseconds. Adjust this range to capture the complete ERP response. flimits (default: [2 110]): Specifies the frequency range in Hz for the analysis. The default captures both low and high frequencies. cycles (default: [1 30]): Wavelet cycles, represented as a two-element vector, where higher values improve frequency resolution but increase computation time. timesout (default: 250): The number of time points for the output. Increasing this parameter provides finer temporal resolution. winsize (default: 100): Size of the moving window in milliseconds for calculating the time-frequency response. nfreqs (default: 109): The number of frequencies for time-frequency decomposition. outputdir (default: tempdir ): Directory for saving result files. Adjust this to store outputs in a specific project folder.","title":"General Parameters"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#artifact-rejection","text":"ampThreshold (default: 120): Threshold for artifact rejection. Trials exceeding this amplitude are excluded from analysis. emptyEEG (default: true ): Removes EEG data from the output structure to save memory, retaining only summary metrics.","title":"Artifact Rejection"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#data-specific-options","text":"sourceOn (default: false ): When true , the function selects electrodes specifically for source analysis targeting auditory cortex regions. byChannel (default: false ): When set to true , the function computes time-frequency data for each individual channel. When false , it averages signals from selected sensors. baselinew (default: [-500 0]): A time range in milliseconds for ERSP baseline correction. This baseline is applied to normalize ERSP data relative to a pre-stimulus period.","title":"Data Specific Options"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#example-usage","text":"Here is a practical example for running this function with baseline correction and source-based electrode selection: [EEG, results] = eeg_htpCalcTimeFrequency(EEG, ... 'sourceOn', true, ... 'byChannel', true, ... 'baselinew', [-500 0]); In this setup: sourceOn = if true uses specific electrodes within the auditory cortex. byChannel = if true processes each selected channel individually. baselinew = [-500 0] applies baseline correction for ERSP based on the -500 to 0 ms pre-stimulus window.","title":"Example Usage"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#outputs","text":"EEG : Modified EEGLAB EEG structure with additional fields for time-frequency data in EEG.vhtp . results : A structure containing: ITC and ERSP data across channels Summary table of results, including metrics like mean power and phase coherence over defined ROIs. Rejection statistics for artifact-prone epochs. Example Workflow Load EEG data and ensure it is epoched for the stimulus of interest. Define analysis parameters: Set tlimits and flimits for the specific time and frequency ranges relevant to your study. Define cycles and timesout based on desired frequency and temporal resolution. Run artifact rejection using ampThreshold to exclude noisy epochs. Run the function with necessary parameters, as shown in the example above. Analyze and save results: Examine the results structure for summary tables and ITC/ERSP data. Save output tables to the specified directory for report generation.","title":"Outputs"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#additional-notes","text":"Artifact rejection is performed by checking if any trial exceeds the amplitude threshold defined by ampThreshold . ROI specification allows targeted frequency and time ranges for specific ERP components, particularly useful for auditory or visual stimuli. Further customization is possible by modifying cycles , nfreqs , and baseline parameters based on experiment design.","title":"Additional Notes"},{"location":"eeg_htpCalcTimeFrequency/eeg_htpCalcTimeFrequency/#troubleshooting","text":"Low trial count error: Ensure that EEG data contains at least 10 trials for stable results. High computation time: Increase winsize and reduce nfreqs if computation is slow, especially for high-density data.","title":"Troubleshooting"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/","text":"eeg_htpEegAssessPipelineHAPPE Function Overview The eeg_htpEegAssessPipelineHAPPE function is an adaptation of the HAPPE (Harvard Automated processing Pipline for EEG) framework. However, it should be stated that this is no tanother preprocessing function, but this function is specifically designed to perform a comparative quality analysis between the intial version of an EEG file and the post process version. ( EEG1 and EEG2 ). It includes visual quality checks, as well as computation of various quality metrics and statistical outputs. The function returns a summary table of metrics and exports visuals and statistics if specified. Please Note it is necessary to have EEGLAB running prior to utilizing the eeg_htpEegAssessPipelineHAPPE function. Key Features Compares EEG datasets EEG1 and EEG2 using correlation coefficients across channels and frequency bands. Includes signal quality checks, visualizations, and detailed output logs. Provides options to adjust resampling rates, define group labels, and export data in different formats. Requirements The function is designed to use an unprocessed and postprocessed version of the same EEG, not two different EEG samples They should also both have the same sampling rate for both files Function Syntax [summary_table] = eeg_htpEegAssessPipelineHAPPE(EEG1, EEG2, varargin) Input Parameters/Requirements EEG1 : The first EEG dataset in EEG .set file format and is the initial version of the EEG. EEG2 : The second EEG dataset in EEG .set file format and is the post process version of the EEG. varargin : Optional parameters passed as name-value pairs. Optional Parameters ( varargin ) outputdir (default: tempdir ): The directory where outputs are saved. resampleRate (default: 500): Resampling rate for the datasets. groupLabels (default: { EEG1.setname , EEG2.setname }): Labels for each group, used in output logs and plots. tableonly (default: false ): If true , only summary tables are generated without visualization. saveoutput (default: true ): If true , saves the output files (CSV and image files). outputfile (default: [] ): Specifies a custom filename for the CSV output file. Steps and Details 1. Input Validation and Resampling The function validates the data type for inputs and confirms that the sampling rates of EEG1 and EEG2 are the same. If resampling is needed (defined by resampleRate ), it uses the function eeg_htpEegResampleDataEeglab to resample both EEG datasets to the specified rate. 2. Signal Preparation Converts epoch data into continuous format if EEG1 or EEG2 are epoched. Converts EEG data to double precision to ensure accuracy during calculations. 3. Quality Assurance Metrics The function obtains several quality assurance metrics: Channel Correlation Coefficient: Description: This measures the linear relationship between the corresponding channels of EEG1 and EEG2 . Calculation: The correlation coefficient is calculated for each channel across the two datasets using the corr function. Output: A vector of correlation coefficients, one for each channel. High values close to 1 indicate high similarity between the channels. Frequency Band Correlation: Description: This assesses the similarity of EEG signals in specific frequency bands across channels. Calculation: The magnitude-squared coherence ( mscohere ) function is used to compute the coherence between signals for each frequency band. Output: A matrix where each row corresponds to a channel and each column to a frequency bin. Higher coherence values indicate stronger similarity in the frequency domain. Signal-to-Noise Ratios (SNR): Description: This measures the ratio of signal power to noise power in the EEG data. Calculation: The SNR is calculated using a forumla that divides the square root of two variable NUM and DEN . Then converts its units into decibels using a lograithmic funcition. NUM is the sum of squares of the EEG signal, and DEN is the sum of squared differences between EEG1 and EEG2. Output: A single SNR value indicating the overall signal quality relative to noise. Outputs Primary Outputs The function generates and exports: - summary_table : A table containing quality metrics, correlations, and information about channels with lower quality signals. qi_table (optional): A quality index table for tracking assessment details across multiple EEG datasets. CSV File: If saveoutput is true , the function saves the summary_table in CSV format. A custom filename can be specified with outputfile . Image File: Saves visualizations as a PNG image if tableonly is false . Optional Visualization ( Note - Only will occur if tableonly is false ) Topographic Plots: These plots show the correlation coefficients for different EEG channels. The units are dimensionless because correlation coefficients range from -1 to 1. Histogram: The x-axis represents the correlation coefficient values (dimensionless), and the y-axis represents the count or frequency of these values. Spectrogram and Difference Line Plot: Compares the power spectral density (PSD) of EEG1 and EEG2 with a line plot highlighting percentage differences. The y-axis (left side) represents the Power Spectral Density (PSD) in logarithmic units, typically dB/Hz (decibels per Hertz). The y-axis (right side) represents the percentage difference in power between EEG2 and EEG1, expressed in percentage (%). Difference Histogram: Plots The x-axis represents the percentage difference between EEG2 and EEG1 power (%), and the y-axis represents the count or frequency of these percentage differences. Example Usage % Load EEG datasets EEG1 = pop_loadset('filename', 'EEG1.set', 'filepath', 'path/to/data'); EEG2 = pop_loadset('filename', 'EEG2.set', 'filepath', 'path/to/data'); % Run quality assessment with custom parameters summary_table = eeg_htpEegAssessPipelineHAPPE(EEG1, EEG2, ... 'outputdir', 'example_directory', ... 'resampleRate', 250, ... 'groupLabels', {'Control', 'Experimental'}, ... 'tableonly', false, ... 'saveoutput', true, ... 'outputfile', 'EEG_quality_comparison.csv'); Final Notes Ensure EEG datasets EEG1 and EEG2 have similar structure (ie. same sampling rate and sample size) and channels before running. Use resampleRate to control the down-sampling for faster processing if EEG data has a high sampling rate. This function requires access to EEGLAB functions such as pop_loadset and eeg_htpEegResampleDataEeglab , so make sure they are in your working directory.","title":"eeg_htpEegAssessPipelineHAPPE Function"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#eeg_htpeegassesspipelinehappe-function","text":"","title":"eeg_htpEegAssessPipelineHAPPE Function"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#overview","text":"The eeg_htpEegAssessPipelineHAPPE function is an adaptation of the HAPPE (Harvard Automated processing Pipline for EEG) framework. However, it should be stated that this is no tanother preprocessing function, but this function is specifically designed to perform a comparative quality analysis between the intial version of an EEG file and the post process version. ( EEG1 and EEG2 ). It includes visual quality checks, as well as computation of various quality metrics and statistical outputs. The function returns a summary table of metrics and exports visuals and statistics if specified. Please Note it is necessary to have EEGLAB running prior to utilizing the eeg_htpEegAssessPipelineHAPPE function.","title":"Overview"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#key-features","text":"Compares EEG datasets EEG1 and EEG2 using correlation coefficients across channels and frequency bands. Includes signal quality checks, visualizations, and detailed output logs. Provides options to adjust resampling rates, define group labels, and export data in different formats.","title":"Key Features"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#requirements","text":"The function is designed to use an unprocessed and postprocessed version of the same EEG, not two different EEG samples They should also both have the same sampling rate for both files","title":"Requirements"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#function-syntax","text":"[summary_table] = eeg_htpEegAssessPipelineHAPPE(EEG1, EEG2, varargin)","title":"Function Syntax"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#input-parametersrequirements","text":"EEG1 : The first EEG dataset in EEG .set file format and is the initial version of the EEG. EEG2 : The second EEG dataset in EEG .set file format and is the post process version of the EEG. varargin : Optional parameters passed as name-value pairs.","title":"Input Parameters/Requirements"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#optional-parameters-varargin","text":"outputdir (default: tempdir ): The directory where outputs are saved. resampleRate (default: 500): Resampling rate for the datasets. groupLabels (default: { EEG1.setname , EEG2.setname }): Labels for each group, used in output logs and plots. tableonly (default: false ): If true , only summary tables are generated without visualization. saveoutput (default: true ): If true , saves the output files (CSV and image files). outputfile (default: [] ): Specifies a custom filename for the CSV output file.","title":"Optional Parameters (varargin)"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#steps-and-details","text":"","title":"Steps and Details"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#1-input-validation-and-resampling","text":"The function validates the data type for inputs and confirms that the sampling rates of EEG1 and EEG2 are the same. If resampling is needed (defined by resampleRate ), it uses the function eeg_htpEegResampleDataEeglab to resample both EEG datasets to the specified rate.","title":"1. Input Validation and Resampling"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#2-signal-preparation","text":"Converts epoch data into continuous format if EEG1 or EEG2 are epoched. Converts EEG data to double precision to ensure accuracy during calculations.","title":"2. Signal Preparation"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#3-quality-assurance-metrics","text":"The function obtains several quality assurance metrics: Channel Correlation Coefficient: Description: This measures the linear relationship between the corresponding channels of EEG1 and EEG2 . Calculation: The correlation coefficient is calculated for each channel across the two datasets using the corr function. Output: A vector of correlation coefficients, one for each channel. High values close to 1 indicate high similarity between the channels. Frequency Band Correlation: Description: This assesses the similarity of EEG signals in specific frequency bands across channels. Calculation: The magnitude-squared coherence ( mscohere ) function is used to compute the coherence between signals for each frequency band. Output: A matrix where each row corresponds to a channel and each column to a frequency bin. Higher coherence values indicate stronger similarity in the frequency domain. Signal-to-Noise Ratios (SNR): Description: This measures the ratio of signal power to noise power in the EEG data. Calculation: The SNR is calculated using a forumla that divides the square root of two variable NUM and DEN . Then converts its units into decibels using a lograithmic funcition. NUM is the sum of squares of the EEG signal, and DEN is the sum of squared differences between EEG1 and EEG2. Output: A single SNR value indicating the overall signal quality relative to noise.","title":"3. Quality Assurance Metrics"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#outputs","text":"","title":"Outputs"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#primary-outputs","text":"The function generates and exports: - summary_table : A table containing quality metrics, correlations, and information about channels with lower quality signals. qi_table (optional): A quality index table for tracking assessment details across multiple EEG datasets. CSV File: If saveoutput is true , the function saves the summary_table in CSV format. A custom filename can be specified with outputfile . Image File: Saves visualizations as a PNG image if tableonly is false .","title":"Primary Outputs"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#optional-visualization","text":"( Note - Only will occur if tableonly is false ) Topographic Plots: These plots show the correlation coefficients for different EEG channels. The units are dimensionless because correlation coefficients range from -1 to 1. Histogram: The x-axis represents the correlation coefficient values (dimensionless), and the y-axis represents the count or frequency of these values. Spectrogram and Difference Line Plot: Compares the power spectral density (PSD) of EEG1 and EEG2 with a line plot highlighting percentage differences. The y-axis (left side) represents the Power Spectral Density (PSD) in logarithmic units, typically dB/Hz (decibels per Hertz). The y-axis (right side) represents the percentage difference in power between EEG2 and EEG1, expressed in percentage (%). Difference Histogram: Plots The x-axis represents the percentage difference between EEG2 and EEG1 power (%), and the y-axis represents the count or frequency of these percentage differences.","title":"Optional Visualization"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#_1","text":"","title":""},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#example-usage","text":"% Load EEG datasets EEG1 = pop_loadset('filename', 'EEG1.set', 'filepath', 'path/to/data'); EEG2 = pop_loadset('filename', 'EEG2.set', 'filepath', 'path/to/data'); % Run quality assessment with custom parameters summary_table = eeg_htpEegAssessPipelineHAPPE(EEG1, EEG2, ... 'outputdir', 'example_directory', ... 'resampleRate', 250, ... 'groupLabels', {'Control', 'Experimental'}, ... 'tableonly', false, ... 'saveoutput', true, ... 'outputfile', 'EEG_quality_comparison.csv');","title":"Example Usage"},{"location":"eeg_htpEegAssessPipelineHAPPE/eeg_htpEegAssessPipelineHAPPE/#final-notes","text":"Ensure EEG datasets EEG1 and EEG2 have similar structure (ie. same sampling rate and sample size) and channels before running. Use resampleRate to control the down-sampling for faster processing if EEG data has a high sampling rate. This function requires access to EEGLAB functions such as pop_loadset and eeg_htpEegResampleDataEeglab , so make sure they are in your working directory.","title":"Final Notes"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/","text":"eeg_htpEegEpoch2Cont Function Overview This page provides documentation on how to use eeg_htpEegEpoch2Cont function designed to convert epoched EEG data into continuous data. This function is categorized under \"Preprocessing\" and helps streamline the transition from segmented to continuous data formats, which is essential for various EEG analyses. Function Description The function takes epoched EEG data (data segmented into trials) and converts it into a continuous data format. This process involves reshaping the data matrix and updating relevant metadata fields such as the number of data points and the time vector. Function function EEG = epoched_to_continuous(EEG) Inputs EEG : A structure containing EEG data and associated metadata. This structure must have the following fields: data : A 3D matrix of EEG data with dimensions (channels x points x trials). srate : The sampling rate of the EEG data. Outputs EEG : The modified EEG structure with continuous data. The relevant fields are updated to reflect the new data format. Detailed Steps Input Validation: The function starts by validating the input using MATLAB's inputParser to ensure the input EEG is a structure. Dimension Check: It checks if the EEG data has more than two dimensions, indicating that it is epoched. Data Reshaping: If the data is epoched, it reshapes the 3D data matrix into a 2D matrix, effectively concatenating trials into a continuous stream. Metadata Update: The function updates the number of points ( EEG.pnts ) and the time vector ( EEG.times ) based on the new continuous data format. Data Conversion: It converts the data to double precision to ensure numerical stability. Set Check: It performs a check on the EEG structure using eeg_checkset (a common function in EEG processing toolboxes like EEGLAB ) to ensure the structure's consistency. Example Method 1. Load Your EEG Data Before using the function, load your EEG data into an EEGLAB structure. EEG = pop_loadset('filename', 'your_eeg_data.set', 'filepath', 'example_path/'); 2. Convert Epoched Data to Continuous Data Use the eeg_htpEegEpoch2Cont function to convert your epoched EEG data to continuous data. Example: Converting epoched data to continuous data EEG = eeg_htpEegEpoch2Cont(EEG); 3. Check the Results After converting, you can check the updated EEG structure. Example: Displaying the size of the continuous data disp(size(EEG.data)); % Should display the new size of the continuous data Final Notes Ensure that the eeg_checkset function is available in your MATLAB path. This function is typically part of the EEGLAB toolbox. The function assumes that the input EEG data is correctly formatted and that the data field contains a 3D matrix if epoched. If the data is already continuous then a warning will we displayed and no changes will occur.","title":"eeg_htpEegEpoch2Cont Function"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#eeg_htpeegepoch2cont-function","text":"","title":"eeg_htpEegEpoch2Cont Function"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#overview","text":"This page provides documentation on how to use eeg_htpEegEpoch2Cont function designed to convert epoched EEG data into continuous data. This function is categorized under \"Preprocessing\" and helps streamline the transition from segmented to continuous data formats, which is essential for various EEG analyses.","title":"Overview"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#function-description","text":"The function takes epoched EEG data (data segmented into trials) and converts it into a continuous data format. This process involves reshaping the data matrix and updating relevant metadata fields such as the number of data points and the time vector.","title":"Function Description"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#function","text":"function EEG = epoched_to_continuous(EEG)","title":"Function"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#inputs","text":"EEG : A structure containing EEG data and associated metadata. This structure must have the following fields: data : A 3D matrix of EEG data with dimensions (channels x points x trials). srate : The sampling rate of the EEG data.","title":"Inputs"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#outputs","text":"EEG : The modified EEG structure with continuous data. The relevant fields are updated to reflect the new data format.","title":"Outputs"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#detailed-steps","text":"Input Validation: The function starts by validating the input using MATLAB's inputParser to ensure the input EEG is a structure. Dimension Check: It checks if the EEG data has more than two dimensions, indicating that it is epoched. Data Reshaping: If the data is epoched, it reshapes the 3D data matrix into a 2D matrix, effectively concatenating trials into a continuous stream. Metadata Update: The function updates the number of points ( EEG.pnts ) and the time vector ( EEG.times ) based on the new continuous data format. Data Conversion: It converts the data to double precision to ensure numerical stability. Set Check: It performs a check on the EEG structure using eeg_checkset (a common function in EEG processing toolboxes like EEGLAB ) to ensure the structure's consistency.","title":"Detailed Steps"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#example-method","text":"","title":"Example Method"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#1-load-your-eeg-data","text":"Before using the function, load your EEG data into an EEGLAB structure. EEG = pop_loadset('filename', 'your_eeg_data.set', 'filepath', 'example_path/');","title":"1. Load Your EEG Data"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#2-convert-epoched-data-to-continuous-data","text":"Use the eeg_htpEegEpoch2Cont function to convert your epoched EEG data to continuous data. Example: Converting epoched data to continuous data EEG = eeg_htpEegEpoch2Cont(EEG);","title":"2. Convert Epoched Data to Continuous Data"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#3-check-the-results","text":"After converting, you can check the updated EEG structure. Example: Displaying the size of the continuous data disp(size(EEG.data)); % Should display the new size of the continuous data","title":"3. Check the Results"},{"location":"eeg_htpEegEpoch2Cont/eeg_htpEegEpoch2Cont/#final-notes","text":"Ensure that the eeg_checkset function is available in your MATLAB path. This function is typically part of the EEGLAB toolbox. The function assumes that the input EEG data is correctly formatted and that the data field contains a 3D matrix if epoched. If the data is already continuous then a warning will we displayed and no changes will occur.","title":"Final Notes"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/","text":"eeg_htpEegResampleDataEeglab Function The eeg_htpEegResampleDataEeglab function resamples EEG data to a newly specified sampling rate using the EEGLAB toolbox. This guide will walk you through how to use this function effectively. Function Description The eeg_htpEegResampleDataEeglab function takes an EEGLAB EEG structure and resamples its data to a new specified sampling rate. It optionally saves the output and logs relevant information. Syntax [EEG, results] = eeg_htpEegResampleDataEeglab(EEG, 'srate', 500, 'saveoutput', false, 'outputdir', '') Inputs Required Parameter EEG : An EEGLAB structure containing the EEG data. Optional Parameters srate : A numeric value specifying the new sampling rate (default: 500). saveoutput : A boolean indicating if the output should be saved (default: false). outputdir : A string specifying the directory to save the output (default: ''). Outputs EEG : The updated EEGLAB structure with the resampled data. results : A structure containing function-specific results, including a quality information (QI) table and input parameters used. Example Method 1. Load Your EEG Data Before using the function, load your EEG data into an EEGLAB structure. EEG = pop_loadset('filename', 'your_eeg_data.set', 'filepath', 'path_to_your_data/'); 2. Resample Your EEG Data Use the eeg_htpEegResampleDataEeglab function to resample your EEG data. You can specify the new sampling rate, whether to save the output, and the output directory. Example: Resampling to 500 Hz and saving the output to a specified directory [EEG, results] = eeg_htpEegResampleDataEeglab(EEG, 'srate', 500, 'saveoutput', true, 'outputdir', 'example_directory/'); 3. Check the Results After resampling, you can check the updated EEG structure and results. Example: Displaying the new sampling rate disp(EEG.srate); % Should display the new sampling rate Example: Viewing the QI table disp(results.qi_table); Final Notes Ensure that the EEGLAB toolbox is installed and added to your MATLAB path. The function logs the original and new sampling rates and updates the EEGLAB structure accordingly. If the original sampling rate is above 2000 Hz, it first downsamples to 1000 Hz before resampling to the specified rate.","title":"eeg_htpEegResampleDataEeglab Function"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#eeg_htpeegresampledataeeglab-function","text":"The eeg_htpEegResampleDataEeglab function resamples EEG data to a newly specified sampling rate using the EEGLAB toolbox. This guide will walk you through how to use this function effectively.","title":"eeg_htpEegResampleDataEeglab Function"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#function-description","text":"The eeg_htpEegResampleDataEeglab function takes an EEGLAB EEG structure and resamples its data to a new specified sampling rate. It optionally saves the output and logs relevant information.","title":"Function Description"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#syntax","text":"[EEG, results] = eeg_htpEegResampleDataEeglab(EEG, 'srate', 500, 'saveoutput', false, 'outputdir', '')","title":"Syntax"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#inputs","text":"","title":"Inputs"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#required-parameter","text":"EEG : An EEGLAB structure containing the EEG data.","title":"Required Parameter"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#optional-parameters","text":"srate : A numeric value specifying the new sampling rate (default: 500). saveoutput : A boolean indicating if the output should be saved (default: false). outputdir : A string specifying the directory to save the output (default: '').","title":"Optional Parameters"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#outputs","text":"EEG : The updated EEGLAB structure with the resampled data. results : A structure containing function-specific results, including a quality information (QI) table and input parameters used.","title":"Outputs"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#example-method","text":"","title":"Example Method"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#1-load-your-eeg-data","text":"Before using the function, load your EEG data into an EEGLAB structure. EEG = pop_loadset('filename', 'your_eeg_data.set', 'filepath', 'path_to_your_data/');","title":"1. Load Your EEG Data"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#2-resample-your-eeg-data","text":"Use the eeg_htpEegResampleDataEeglab function to resample your EEG data. You can specify the new sampling rate, whether to save the output, and the output directory. Example: Resampling to 500 Hz and saving the output to a specified directory [EEG, results] = eeg_htpEegResampleDataEeglab(EEG, 'srate', 500, 'saveoutput', true, 'outputdir', 'example_directory/');","title":"2. Resample Your EEG Data"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#3-check-the-results","text":"After resampling, you can check the updated EEG structure and results. Example: Displaying the new sampling rate disp(EEG.srate); % Should display the new sampling rate Example: Viewing the QI table disp(results.qi_table);","title":"3. Check the Results"},{"location":"eeg_htpEegResampleDataEeglab/eeg_htpEegResampleDataEeglab/#final-notes","text":"Ensure that the EEGLAB toolbox is installed and added to your MATLAB path. The function logs the original and new sampling rates and updates the EEGLAB structure accordingly. If the original sampling rate is above 2000 Hz, it first downsamples to 1000 Hz before resampling to the specified rate.","title":"Final Notes"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/","text":"util_htpRemapXdatMea Function Overview The util_htpRemapXdatMea function is designed to reorder or remap EEG channel data within an EEGLAB EEG structure according to a specified mapping. This function is particularly useful if the recorded data channels do not correspond to the correct physical electrode locations and need to be reassigned based on a predefined mapping scheme. Function Syntax EEG = util_htpRemapXdatMea(EEG) Inputs EEG : An EEGLAB structure containing the EEG data to be remapped. The EEG.data field should contain EEG signals in a 2D array format, where each row represents a channel, and each column represents a time point. Methods Load EEG Data Load your EEG data as an EEGLAB structure with channels in the existing order. EEG = pop_loadset('your_data.set'); % Load EEG data set Running util_htpRemapXdatMea Execute the function to remap the channels within the EEG structure based on the predefined dictionary. EEG = util_htpRemapXdatMea(EEG); Mapping The function remaps channels from their current order to a new, \"correct\" order using a dictionary ( mappingDict ). This dictionary maps each original channel index (from 1 to 30) to a new index, where each entry represents a correct electrode location for EEG data. For example: Channel 1 in the original data is mapped to position 29 in the reordered data. Channel 2 in the original data is mapped to position 27 in the reordered data. These mappings continue for all channels up to 30. The reorderedArray is filled according to this mapping, and the original EEG.data is replaced with the reordered data. Verify Remapping Results You can verify the remapping by inspecting EEG.data to ensure channels are in the expected positions according to the mapping scheme. disp(EEG.data); % Display the remapped EEG data Full Example % Load EEG data EEG = pop_loadset('your_data.set'); % Remap channels using predefined mapping EEG = util_htpRemapXdatMea(EEG); % Verify remapped channels disp(EEG.data); % Check the reordered data Output EEG : The input EEGLAB structure with its .data field remapped according to the specified mappingDict dictionary. Additional Notes Mapping Dictionary: Adjustments to the mapping dictionary may be necessary if the channel configuration changes or if different data is used. Data Consistency: Be cautious when applying this remapping to ensure it corresponds accurately with the physical setup used during data collection.","title":"util_htpRemapXdatMea Function"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#util_htpremapxdatmea-function","text":"","title":"util_htpRemapXdatMea Function"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#overview","text":"The util_htpRemapXdatMea function is designed to reorder or remap EEG channel data within an EEGLAB EEG structure according to a specified mapping. This function is particularly useful if the recorded data channels do not correspond to the correct physical electrode locations and need to be reassigned based on a predefined mapping scheme.","title":"Overview"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#function-syntax","text":"EEG = util_htpRemapXdatMea(EEG)","title":"Function Syntax"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#inputs","text":"EEG : An EEGLAB structure containing the EEG data to be remapped. The EEG.data field should contain EEG signals in a 2D array format, where each row represents a channel, and each column represents a time point.","title":"Inputs"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#methods","text":"","title":"Methods"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#load-eeg-data","text":"Load your EEG data as an EEGLAB structure with channels in the existing order. EEG = pop_loadset('your_data.set'); % Load EEG data set","title":"Load EEG Data"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#running-util_htpremapxdatmea","text":"Execute the function to remap the channels within the EEG structure based on the predefined dictionary. EEG = util_htpRemapXdatMea(EEG);","title":"Running util_htpRemapXdatMea"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#mapping","text":"The function remaps channels from their current order to a new, \"correct\" order using a dictionary ( mappingDict ). This dictionary maps each original channel index (from 1 to 30) to a new index, where each entry represents a correct electrode location for EEG data. For example: Channel 1 in the original data is mapped to position 29 in the reordered data. Channel 2 in the original data is mapped to position 27 in the reordered data. These mappings continue for all channels up to 30. The reorderedArray is filled according to this mapping, and the original EEG.data is replaced with the reordered data.","title":"Mapping"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#verify-remapping-results","text":"You can verify the remapping by inspecting EEG.data to ensure channels are in the expected positions according to the mapping scheme. disp(EEG.data); % Display the remapped EEG data","title":"Verify Remapping Results"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#full-example","text":"% Load EEG data EEG = pop_loadset('your_data.set'); % Remap channels using predefined mapping EEG = util_htpRemapXdatMea(EEG); % Verify remapped channels disp(EEG.data); % Check the reordered data","title":"Full Example"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#output","text":"EEG : The input EEGLAB structure with its .data field remapped according to the specified mappingDict dictionary.","title":"Output"},{"location":"util_htpRemapXdatMea/util_htpRemapXdatMea/#additional-notes","text":"Mapping Dictionary: Adjustments to the mapping dictionary may be necessary if the channel configuration changes or if different data is used. Data Consistency: Be cautious when applying this remapping to ensure it corresponds accurately with the physical setup used during data collection.","title":"Additional Notes"}]}